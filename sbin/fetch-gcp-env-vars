#!/bin/bash

# -e (errexit): Exit immediately if any command exits with a non-zero status (fails)
# -u (nounset): Exit with an error if any unset variable is referenced
# -o pipefail: Exit with an error if any command in a pipeline fails (not just the last one)
set -euo pipefail

# Google Project ID
PROJECT_ID="79191529711"

# Configuration file path
CONFIG_FILE=/etc/secrets.list

# Get the access token from the metadata server
TOKEN=$(curl -s -H "Metadata-Flavor: Google" \
  "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token" \
  | sed -n 's/.*"access_token":"\([^"]*\)".*/\1/p')

# Read configuration and process secrets
while IFS='|' read -r SECRET_NAME ENV_VAR DESCRIPTION; do
  # Skip comments and empty lines
  [[ $ENV_VAR =~ ^#.*$ ]] && continue
  [[ -z "$ENV_VAR" ]] && continue

  echo "Fetching secret $SECRET_NAME for environment variable $ENV_VAR: $DESCRIPTION"

  # Get the secret value from the secret manager
  VALUE=$(curl -s -H "Authorization: Bearer $TOKEN" \
    "https://secretmanager.googleapis.com/v1/projects/${PROJECT_ID}/secrets/${SECRET_NAME}/versions/latest:access" \
    | sed -n 's/.*"data":\s"\([^"]*\)".*/\1/p' \
    | base64 --decode)

  # Export the secret value for current session
  export "$ENV_VAR"="$VALUE"

  # Remove any existing entry first to avoid duplicates
  sed -i "/^export $ENV_VAR=/d" /etc/environment 2>/dev/null || true
  # Add the secret to the environment file for system-wide access
  echo "export $ENV_VAR=$VALUE" >> /etc/environment

  # Add secret to /etc/apache2/envvars to make it available to Apache
  if [ -f /etc/apache2/envvars ]; then
    # Remove any existing entry first to avoid duplicates
    sed -i "/^export $ENV_VAR=/d" /etc/apache2/envvars 2>/dev/null || true
    # Add the secret to the Apache environment file
    echo "export $ENV_VAR=$VALUE" >> /etc/apache2/envvars
  fi
done < "$CONFIG_FILE"
